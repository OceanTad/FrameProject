apply plugin: 'com.android.application'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId "com.lht.frameproject"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode Integer.parseInt(VERSION_CODE)
        versionName "${VERSION_NAME}"
        flavorDimensions "versionCode"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
                arguments = [moduleName: "app"]
            }
        }
        packagingOptions {
            exclude 'META-INF/rxjava.properties'
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        ndk {
            abiFilters "armeabi-v7a"
        }

    }

    productFlavors {
        wx {
            manifestPlaceholders = [channel: "wx"]
        }
        qq {
            manifestPlaceholders = [channel: "qq"]
        }
    }
//    applicationVariants.all {
//        variant ->
//            variant.outputs.each { output ->
//                def outputFile = output.outputFile
//                if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                    def fileName
//                    if (variant.buildType.name == "release") {
//                        fileName = "app_v" + defaultConfig.versionName + "_" + flavorName + "_" + getDate() + "_release.apk"
//                    } else {
//                        fileName = "app_v" + defaultConfig.versionName + "_" + flavorName + "_" + getDate() + "_debug.apk"
//                    }
//                    output.outputFileName = new File("./", fileName)
//                }
//            }
//    }

    signingConfigs {
        release {
//            storeFile file("${STORE_FILE}")
//            storePassword "${STROE_PASSWORD}"
//            keyAlias "${KEY_ALIAS}"
//            keyPassword "${KEY_PASSWORD}"
        }
        debug {
//            storeFile file("${STORE_FILE}")
//            storePassword "${STROE_PASSWORD}"
//            keyAlias "${KEY_ALIAS}"
//            keyPassword "${KEY_PASSWORD}"
        }
    }

    buildTypes {

        debug {
            minifyEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

static properties(Project project) {
    Properties properties = new Properties()
    properties.load(project.file('gradle.properties').newDataInputStream())
    def propertyValue = properties.getProperty('BUILD_INCLUDE')
    if (propertyValue == null)
        return null
    return propertyValue.split(',')
}

repositories {
    flatDir {
        dirs 'libs'
        dirs project(':base_library').file('libs')
        if (properties(project.rootProject) != null) {
            for (int i = 0; i < properties(project.rootProject).size(); i++) {
                if (properties(project.rootProject)[i].length() > 0)
                    dirs project(':' + properties(project.rootProject)[i]).file('libs')
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'

    annotationProcessor rootProject.ext.dependencies.arouter_compiler

    implementation project(':base_library')

    if (properties(project.rootProject) != null) {
        for (int i = 0; i < properties(project.rootProject).size(); i++) {
            if (properties(project.rootProject)[i].length() > 0) {
                implementation project(':' + properties(project.rootProject)[i])
            }
        }
    }

}
